Automatically generated by Mendeley Desktop 1.17.9
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Preferences -> BibTeX in Mendeley Desktop

@book{Gantmacher1959,
address = {New York},
author = {Gantmacher, F.R.},
file = {:Users/savasp/Google Drive/Books/Mathematical Analysis/1959 GANTMACHER Matrix Theory.pdf:pdf},
isbn = {8284-0131-4},
publisher = {Chelsea Publishing Company},
title = {{The Theory of Matrics}},
year = {1959}
}
@book{Siek2001,
address = {Boston, MA},
author = {Siek, JG and Lee, LQ and Lumsdaine, Andrew},
file = {:Users/savasp/Google Drive/Books/Programming/(The C++ In-Depth Series) Jeremy G. Siek, Lie-Quan Lee, Andrew Lumsdaine-The Boost Graph Library{\_} User Guide and Reference Manual-Addison-Wesley Professional (2001).pdf:pdf},
isbn = {0201729148},
publisher = {Pearson Education},
title = {{The Boost Graph Library: User Guide and Reference Manual}},
year = {2001}
}
@book{MacDuffee1933,
abstract = {This treatise, by one of Russia's leading mathematicians, gives a coherent account of matrix theory with a view to applications in mathematics, theoretical physics, statistics, electrical engineering, etc. The individual chapters have been kept as far as possible independent of each other, so that the reader acquainted with the contents of Chapter 1 can proceed immediately to the chapters of special interest. Previously, this material was only available in the periodical literature.},
author = {Gantmacher, F.R.},
doi = {10.1007/978-3-642-99234-6},
edition = {2},
file = {:Users/savasp/Google Drive/Books/Mathematical Analysis/Felix R. Gantmacher-The Theory of Matrices, Vol. 2-American Mathematical Society (2000).pdf:pdf},
isbn = {978-3-642-98421-1},
issn = {19450699},
publisher = {AMS Chelsea Publishing},
title = {{The Theory of Matrices vol 2}},
url = {http://link.springer.com/10.1007/978-3-642-99234-6},
year = {1987}
}
@book{Sole2011a,
address = {Princeton},
author = {Sole, R. V.},
file = {:Users/savasp/Library/Application Support/Mendeley Desktop/Downloaded/Sole - 2011 - Phase Transitions.pdf:pdf},
isbn = {978-0-691-15075-8},
pages = {70--75},
publisher = {Princeton University Press},
title = {{Phase Transitions}},
year = {2011}
}
@book{Schaefer1974,
address = {Heidelberg},
author = {Schaefer, H.H.},
doi = {10.1007/978-3-642-65970-6},
edition = {1},
file = {:Users/savasp/Google Drive/Books/Mathematical Analysis/(Die Grundlehren der mathematischen Wissenschaften 215) Dr. rer. nat. Helmut H. Schaefer (auth.)-Banach Lattices and Positive Operators-Springer-Verlag Berlin Heidelberg (1974).pdf:pdf},
isbn = {978-3-642-65970-6},
pages = {378},
publisher = {Springer-Verlag Berlin Heidelberg},
title = {{Banach Lattices and Positive Operators}},
year = {1974}
}
@article{Johnson1975,
abstract = {An algorithm is presented which finds all the elementary circuits of a directed graph in time bounded by {\$}O((n + e)(c + 1)){\$} and space bounded by {\$}O(n + e){\$}, where there are n vertices, e edges and c elementary circuits in the graph. The algorithm resembles algorithms by Tiernan and Tarjan, but is faster because it considers each edge at most twice between any one circuit and the next in the output sequence.},
author = {Johnson, Donald B.},
doi = {10.1137/0204007},
file = {:Users/savasp/Library/Mobile Documents/com{\~{}}apple{\~{}}Preview/Documents/Complexity and Networks/FINDING ALL THE ELEMENTARY CIRCUITS OF A DIRECTED GRAPH.PDF:PDF},
isbn = {0097-5397},
issn = {0097-5397},
journal = {SIAM J. Comput.},
keywords = {1,algorithm,broadly speaking,circuit,cycle,digraph,enumeration,every,graph,introduction,is determining how many,is the construction of,objects,problems on,set,sets of objects,the one,the other,there are in the,there are two enumeration,which we call counting,which we call finding},
number = {1},
pages = {77--84},
title = {{Finding All the Elementary Circuits of a Directed Graph}},
volume = {4},
year = {1975}
}
@article{Tarjan1971a,
abstract = {The value of depth-first search or "backtracking" as a technique for solving graph problems is illustrated by two examples. An algorithm for finding the biconnected components of an undirected graph and an improved version of an algorithm for finding the strongly connected components of a directed graph are presented. The space and time requirements of both algorithms are bounded by k1V + k2E + k3 for some constants k1, k2, and k3, where V is the number of vertices and E is the number of edges of the graph being examined.},
author = {Tarjan, Robert},
doi = {10.1109/SWAT.1971.10},
file = {:Users/savasp/Library/Mobile Documents/com{\~{}}apple{\~{}}Preview/Documents/Complexity and Networks/DEPTH-FIRST SEARCH AND LINEAR GRAPH ALGORITHMS.pdf:pdf},
isbn = {SMJCAT000001000002000146000001},
issn = {0272-4847},
journal = {12th Annu. Symp. Switch. Autom. Theory (swat 1971)},
keywords = {1,a,algorithm,backtracking,be directed,biconnectivity,connectivity,consider a graph g,consisting of a set,depth-first,graph,introduction,of vertices u and,pairs,search,set of edges g,spanning tree,strong-connectivity,the edges are ordered,the graph may either,v,w},
number = {2},
pages = {146--160},
pmid = {920020233},
title = {{Depth-first search and linear graph algorithms}},
volume = {1},
year = {1971}
}
@book{Knuth1994,
address = {Standford University},
author = {Knuth, Donald E.},
file = {:Users/savasp/Google Drive/Books/Programming/Donald E. Knuth-Stanford GraphBase{\_} A Platform for Combinatorial Computing, The-Addison-Wesley Professional (1994).pdf:pdf},
isbn = {0-201-54275-7},
pages = {512--519},
publisher = {ACM Press},
title = {{GraphBase: A Platform for Combinatorial Computing}},
year = {1994}
}
@book{Graham,
address = {Heidelberg},
author = {Varga, Richard S.},
doi = {10.1007/978-3-642-05156-2},
edition = {2nd editio},
editor = {Yserentant, H. and Bank, R. and Graham, R.L. and Stoer, J. and Varga, R.},
file = {:Users/savasp/Google Drive/Books/Mathematical Analysis/(Springer Series in Computational Mathematics 27) Richard S. Varga (auth.)-Matrix Iterative Analysis -Springer-Verlag Berlin Heidelberg (2000).pdf:pdf},
isbn = {978-3-540-66321-8},
pages = {355},
publisher = {Springer-Verlag},
title = {{Matrix Iterative Analysis}},
year = {2000}
}
@article{Hossain2010,
abstract = {The design structure matrix or dependency structure matrix (DSM) provides an effective tool for the representation and analysis of complex system models. In a majority of application areas these matrices are almost invariably sparse in that a large proportion of the entries are identically zero. Algorithms for sparse matrices arising in large-scale problems must exploit the sparsity structure for computational efficiency. Combinatorial structures play an important role in the design of sparse matrix algorithms (Gilbert et. al., 2008). In this paper we borrow novel ideas from combinatorial scientific computing literature and illustrate how they can be applied in DSM computations to build new and efficient software tools for analysing the DSM. Some of the existing publicly available DSM research software use MATLAB â€“ an integrated development environment for technical computing. McGill (2005) and Thebeau (2001) discuss MATLAB implementation of DSM partitioning and clustering where matrices are stored as dense matrices. It is to be noted that MATLAB, however, does implement sparse matrix operations using a column-oriented sparse storage of the matrix. Our objective here is to use a general-purpose high-level programming language (e.g., C++) for the implementation of computationally intensive DSM algorithms for large-scale problems, thus ensuring maximum portability and extensibility},
author = {Hossain, Shahadat},
file = {:Users/savasp/Library/Mobile Documents/com{\~{}}apple{\~{}}Preview/Documents/Complexity and Networks/EFFICIENTLY COMPUTING WITH DESIGN STRUCTURE MATRICES.pdf:pdf},
isbn = {978-3-446-42473-9},
journal = {Manag. Complex. by Model. Depend. - Proc. 12th Int. DSM Conf.},
keywords = {block triangular form,depth-first search,sparse data structure,strongly connected component},
number = {July},
pages = {345--358},
title = {{Efficiently Computing with Design Structure Matrices}},
year = {2010}
}
